/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
 // cli ls /usr/lib/jvm/java-16-openjdk-amd64/ 
 // export JAVA_HOME=/usr/lib/jvm/java-16-openjdk-amd64/ 
package people
import people.model.Person
import people.data.PeopleDAO
import java.sql.SQLException



class App {
    private val people = ArrayList<Person>()
    private var peopleDAO = PeopleDAO()
    private lateinit var dsPeople:ArrayList<Person>

    init {
        try {
            this.dbPeople = this.peopleDAO.getAllPeople()
        } catch(e:SQLException) {
            println("Err: Problema com o banco: ${e}")
            this.dbPeople = ArrayList<Person>()
        }
    }
    fun createNewPersonOption() {
        println("\nCreate option")
        println("======================")
        try {
        println("Nome: ")
        val name = readLine()!!
        println("Age: ")
        val age = readLine()!!
        println("Height: ")
        val height = readLine()!!
        println("Gender: ")
        val gender = readLine()!!
        val person = Person(name.toString(), age.toInt(), height.toFloat(), gender.toString())
        this.people.add(person)
        } catch (e: NumberFormatException) {
            println("\nERR: tipo de dado inválido. Pessoa não")
        } catch (e: NullPointerException) {
            println("\nERR: pessoa desconhecida")
        }

    }
    fun seeAllRegisterOption() {
        println("\nSee all option")
        println("======================")
        if(this.people.isEmpty()) {
            println("\nNão há pessoas cadastradas na memória")
            return
        }
        for(person in this.people) {
            println(person)
        }
    }
    fun seeLastRegisterOption() {
        println("\nLast register")
        println("======================")
        if(this.people.isNotEmpty()) {
            println(this.people[this.people.size-1].name)
            return
        }
    }
    fun saveOption() {
        println("\nSave option")
        println("======================")
    }
    fun processOption(opt: Int):Boolean {
        when (opt) {
            1 -> {
                this.createNewPersonOption()
            }
            2 -> { 
                this.seeLastRegisterOption()
            }
            3 -> { 
                this.seeAllRegisterOption()
            }
            4 -> {
                this.saveOption()
            }
            5 -> { return false }
            else -> {
                println("Opção inválida")
                this.saveOption()
                return false
            }
        }
        return true
    }



      fun readOption():Int {
            return try {
                val op = readLine()!!
                if(op.isEmpty())
                    4
                else op.toInt()
            } catch (e:NumberFormatException) {
                println("Formato de opcção não aceito.")
                4
            } catch (e:NullPointerException) {
                println("Err: Erro não reconhecido.")
                -1
            }
        }
    fun printOptions() {
      
        println("-------------------------------------")
        println("| 1) Create new user----------------|")
        println("| 2) See last register--------------|")
        println("| 3) See all Registers--------------|")
        println("| 4) Save and Quit------------------|")
        println("| 5) Quit w/o sag-------------------|")
        println("-------------------------------------")
        println("Choose [default 4]: ")

    }
    
    fun run() {
        do {
            this.printOptions()
            val op = this.readOption()
            val process = this.processOption(op)
        } while (process)
    }
}

fun main() {
    App().run();
}


